// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  operations    Operation[]
  subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String   @id @default(cuid())
  name        String
  fileName    String
  fileSize    Int
  fileType    String
  fileUrl     String
  thumbnailUrl String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  operations  Operation[]
  versions    DocumentVersion[]
}

model DocumentVersion {
  id         String   @id @default(cuid())
  documentId String
  version    Int
  fileUrl    String
  createdAt  DateTime @default(now())
  
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Operation {
  id          String   @id @default(cuid())
  type        String   // merge, split, compress, convert, edit, ocr, sign, protect
  status      String   // pending, processing, completed, failed
  inputFiles  String[] // Array of file URLs
  outputFiles String[] // Array of file URLs
  metadata    Json?    // Additional operation data
  userId      String
  documentId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  stripeCurrentPeriodEnd DateTime?
  plan                 String    @default("free") // free, pro, business, enterprise
  status               String    @default("active") // active, canceled, past_due
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

  model Suggestion {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  status    String   @default("pending") // pending, read, completed
  createdAt DateTime @default(now())
  }

  model Admin {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String   // Store encrypted password
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }
